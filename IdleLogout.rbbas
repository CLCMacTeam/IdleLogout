#tag ClassProtected Class IdleLogoutInherits Application	#tag Event		Sub Open()		  Dim debugFileName as string		  Dim theDate as date		  dim mXMLtreeToFollow(-1) as string		  dim mPrefKeyFoundData(-1) as string		  dim mTempFoundPlistData as string = "" // Local variable to use for gathering plist settings		  theDate = new Date		  		  Globals.gAppFolderItem = GetFolderItem("/Users/Shared/", FolderItem.PathTypeShell)		  if Globals.gAppFolderItem.Exists = false then		    // dim Folderexists as boolean		    // Folderexists = LogoutWarning.makeFolder("/Users/Shared/") //Can't make a folder here as a user.		    Globals.gAppFolderItem = GetFolderItem("/tmp/", FolderItem.PathTypeShell)		    MsgBox "Can't find /Users/Shared! Using /tmp/ for logs"		  end		  		  		  // Set the name of the log		  debugFileName = "psuIdleLogout.RUN" + MiscMethods.PadData("0",2,str(theDate.Year),Globals.kLogToFileDisable) _		  + "-" + MiscMethods.PadData("0",2,str(theDate.Month),Globals.kLogToFileDisable) + "-"		  debugFileName = debugFileName + MiscMethods.PadData("0",2,str(theDate.Day),Globals.kLogToFileDisable) + _		  "-" + MiscMethods.PadData("0",2,str(theDate.Hour),Globals.kLogToFileDisable) + "-"		  debugFileName = debugFileName + MiscMethods.PadData("0",2,str(theDate.Minute),Globals.kLogToFileDisable) + _		  "-" + MiscMethods.PadData("0",2,str(theDate.Second),Globals.kLogToFileDisable) + ".log"		  		  // Initilize the log, quit if we can't create the log		  if not (LogToFile.Initialize(debugFileName,Globals.gAppFolderItem)) then		    beep		    MsgBox "Error creating run log file! Exiting..."		    quit		  end if		  		  // Keep only the last 5 logs		  if ( LogToFile.DeleteOldLogs(5) ) then		    LogToFile("Deleted Old Logs")		  end if		  		  		  // CFPref calls		  		  'dim ComputerIdleAfterNumSeconds as Integer = "900"		  'dim IdleLoopDelaySeconds as Integer = "60"		  'dim WaitForUserPromptSeconds = "90"		  		  // Set version number in pref file		  // prefs.Value ("version") = App.pAppVersion		  // dim AppVersionPref as String = prefs.Value("version", App.pAppVersion) // Get version from plist file		  		  'dim ComputerIdleAfterNumSecondsPref as string = prefs.Value("ComputerIdleAfterNumSeconds", App.pComputerIdleAfterNumSeconds)		  'dim IdleLoopDelaySecondsPref as string = prefs.Value("IdleLoopDelaySeconds", App.pIdleLoopDelaySeconds)		  'dim WaitForUserPromptSecondsPref as string = prefs.Value("WaitForUserPromptSeconds", App.pWaitForUserPromptSeconds)		  '		  'LogToFile("CFPrefs Return of ComputerIdleAfterNumSeconds: " + ComputerIdleAfterNumSecondsPref )		  		  		  		  // Are there any users that we should ignore running for?		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "IgnoreUser", mTempFoundPlistData ) ) then		    		    LogoutWarning.pIgnoreUser = mTempFoundPlistData		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(LogoutWarning.pIgnoreUser) )		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'IgnoreUser', using default of "+ str (LogoutWarning.pIgnoreUser) )		    		  end if		  		  // Are there any groups that we should ignore running for?		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "IgnoreGroup", mTempFoundPlistData ) ) then		    		    LogoutWarning.pIgnoreGroup = mTempFoundPlistData		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(LogoutWarning.pIgnoreGroup) )		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'IgnoreGroup', using default of "+ str (LogoutWarning.pIgnoreGroup) )		    		  end if		  		  		  // Is this user macadmin?		  if ( MiscMethods.CurrentUsername(LogoutWarning.pIgnoreUser) ) then		    // It is macadmin, quit the app		    LogToFile("Current user is " + LogoutWarning.pIgnoreUser + ", quiting app")		    quit		  else		    LogToFile("User is not " + LogoutWarning.pIgnoreUser + ", continuing")		  end if		  		  // Is this user an admin?		  if ( MiscMethods.CurrentGroup(LogoutWarning.pIgnoreGroup) ) then		    // It is macadmin, quit the app		    LogToFile("Current user is an " + LogoutWarning.pIgnoreGroup + ", quiting app")		    quit		  else		    LogToFile("User is not an " + LogoutWarning.pIgnoreGroup + ", continuing")		  end if		  		  // What should the Title Be in the Popup Window		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "WindowTitle", mTempFoundPlistData ) ) then		    		    LogoutWarning.WarningTitle.setString(str(mTempFoundPlistData))		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(mTempFoundPlistData) )		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'WindowTitle', using default of "+ str(LogoutWarning.WarningTitle.Text))		    		  end if		  		  // How long should we wait before considering the Mac is idle too long?		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "ComputerIdleAfterNumSeconds", mTempFoundPlistData ) ) then		    		    		    LogoutWarning.pComputerIdleAfterNumSeconds = val( mTempFoundPlistData )		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(LogoutWarning.pComputerIdleAfterNumSeconds) )		    		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'ComputerIdleAfterNumSeconds', using default of "+ str (LogoutWarning.pComputerIdleAfterNumSeconds) )		    		  end if		  		  // How often should we check to see how long the Mac has been idle?		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "IdleLoopDelaySeconds", mTempFoundPlistData ) ) then		    		    LogoutWarning.pIdleLoopDelaySeconds = val( mTempFoundPlistData )		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(LogoutWarning.pIdleLoopDelaySeconds) )		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'IdleLoopDelaySeconds', using default of "+ str (LogoutWarning.pIdleLoopDelaySeconds) )		    		  end if		  		  		  // How long should we wait for the user to respond for More Time or to Log Out?		  if ( PlistHelper.readPlist(LogoutWarning.pDefaultPrefsFSPath, LogoutWarning.pDefaultPrefsFileName, "WaitForUserPromptSeconds", mTempFoundPlistData ) ) then		    		    LogoutWarning.pWaitForUserPromptSeconds = val( mTempFoundPlistData )		    		    LogToFile(CurrentMethodName + ": Found the default key data, = " + str(LogoutWarning.pWaitForUserPromptSeconds) )		    		  else // Failed!		    		    LogToFile(CurrentMethodName + ": Warning! Failed to find the default key 'WaitForUserPromptSeconds', using default of "+ str (LogoutWarning.pWaitForUserPromptSeconds) )		    		  end if		  		  		  		  // Set default		  LogToFile(CurrentMethodName + ": Setting pMoreTimeAskedFor as True")		  Dim pMoreTimeAskedFor as Boolean = true		  // Hide window from view at start		  LogoutWarning.Hide()		  // Start IdleThread		  LogToFile(CurrentMethodName + ": Running IdleThread")		  LogoutWarning.IdleThread.Run		  // exit app now		  LogToFile(CurrentMethodName + ": <---")		End Sub	#tag EndEvent	#tag Note, Name = Icon		Application Icon use with CC license:		From http://www.flickr.com/photos/23453447@N02/5107438855/sizes/o/in/photostream/		By zyrquel		http://www.flickr.com/photos/23453447@N02/	#tag EndNote	#tag Property, Flags = &h0		pAppVersion As String = "1.1"	#tag EndProperty	#tag Constant, Name = kEditClear, Type = String, Dynamic = False, Default = \"&Delete", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"&Delete"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"&Delete"	#tag EndConstant	#tag Constant, Name = kFileQuit, Type = String, Dynamic = False, Default = \"&Quit", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"E&xit"	#tag EndConstant	#tag Constant, Name = kFileQuitShortcut, Type = String, Dynamic = False, Default = \"", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"Cmd+Q"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"Ctrl+Q"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="pAppVersion"			Group="Behavior"			InitialValue="1.1"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass